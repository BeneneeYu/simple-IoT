# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CustomAppProto

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class HealthStatusMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HealthStatusMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHealthStatusMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # HealthStatusMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HealthStatusMessage
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # HealthStatusMessage
    def Dispenser(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # HealthStatusMessage
    def Icemaker(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HealthStatusMessage
    def Lightbulb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # HealthStatusMessage
    def FridgeTemp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HealthStatusMessage
    def FreezerTemp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HealthStatusMessage
    def SensorStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def HealthStatusMessageStart(builder): builder.StartObject(7)
def Start(builder):
    return HealthStatusMessageStart(builder)
def HealthStatusMessageAddTs(builder, ts): builder.PrependFloat32Slot(0, ts, 0.0)
def AddTs(builder, ts):
    return HealthStatusMessageAddTs(builder, ts)
def HealthStatusMessageAddDispenser(builder, dispenser): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dispenser), 0)
def AddDispenser(builder, dispenser):
    return HealthStatusMessageAddDispenser(builder, dispenser)
def HealthStatusMessageAddIcemaker(builder, icemaker): builder.PrependInt32Slot(2, icemaker, 0)
def AddIcemaker(builder, icemaker):
    return HealthStatusMessageAddIcemaker(builder, icemaker)
def HealthStatusMessageAddLightbulb(builder, lightbulb): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(lightbulb), 0)
def AddLightbulb(builder, lightbulb):
    return HealthStatusMessageAddLightbulb(builder, lightbulb)
def HealthStatusMessageAddFridgeTemp(builder, fridgeTemp): builder.PrependInt32Slot(4, fridgeTemp, 0)
def AddFridgeTemp(builder, fridgeTemp):
    return HealthStatusMessageAddFridgeTemp(builder, fridgeTemp)
def HealthStatusMessageAddFreezerTemp(builder, freezerTemp): builder.PrependInt32Slot(5, freezerTemp, 0)
def AddFreezerTemp(builder, freezerTemp):
    return HealthStatusMessageAddFreezerTemp(builder, freezerTemp)
def HealthStatusMessageAddSensorStatus(builder, sensorStatus): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(sensorStatus), 0)
def AddSensorStatus(builder, sensorStatus):
    return HealthStatusMessageAddSensorStatus(builder, sensorStatus)
def HealthStatusMessageEnd(builder): return builder.EndObject()
def End(builder):
    return HealthStatusMessageEnd(builder)