# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CustomAppProto

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GroceryOrderMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GroceryOrderMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGroceryOrderMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GroceryOrderMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GroceryOrderMessage
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # GroceryOrderMessage
    def Veggies(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CustomAppProto.VeggieDetail import VeggieDetail
            obj = VeggieDetail()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GroceryOrderMessage
    def VeggiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GroceryOrderMessage
    def VeggiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # GroceryOrderMessage
    def Drinks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CustomAppProto.DrinkType import DrinkType
            obj = DrinkType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GroceryOrderMessage
    def DrinksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GroceryOrderMessage
    def DrinksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # GroceryOrderMessage
    def Milk(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CustomAppProto.MilkDetail import MilkDetail
            obj = MilkDetail()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GroceryOrderMessage
    def MilkLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GroceryOrderMessage
    def MilkIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # GroceryOrderMessage
    def Bread(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CustomAppProto.BreadDetail import BreadDetail
            obj = BreadDetail()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GroceryOrderMessage
    def BreadLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GroceryOrderMessage
    def BreadIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # GroceryOrderMessage
    def Meat(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CustomAppProto.MeatDetail import MeatDetail
            obj = MeatDetail()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GroceryOrderMessage
    def MeatLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GroceryOrderMessage
    def MeatIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def GroceryOrderMessageStart(builder): builder.StartObject(6)
def Start(builder):
    return GroceryOrderMessageStart(builder)
def GroceryOrderMessageAddTs(builder, ts): builder.PrependFloat32Slot(0, ts, 0.0)
def AddTs(builder, ts):
    return GroceryOrderMessageAddTs(builder, ts)
def GroceryOrderMessageAddVeggies(builder, veggies): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(veggies), 0)
def AddVeggies(builder, veggies):
    return GroceryOrderMessageAddVeggies(builder, veggies)
def GroceryOrderMessageStartVeggiesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartVeggiesVector(builder, numElems):
    return GroceryOrderMessageStartVeggiesVector(builder, numElems)
def GroceryOrderMessageAddDrinks(builder, drinks): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(drinks), 0)
def AddDrinks(builder, drinks):
    return GroceryOrderMessageAddDrinks(builder, drinks)
def GroceryOrderMessageStartDrinksVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDrinksVector(builder, numElems):
    return GroceryOrderMessageStartDrinksVector(builder, numElems)
def GroceryOrderMessageAddMilk(builder, milk): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(milk), 0)
def AddMilk(builder, milk):
    return GroceryOrderMessageAddMilk(builder, milk)
def GroceryOrderMessageStartMilkVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartMilkVector(builder, numElems):
    return GroceryOrderMessageStartMilkVector(builder, numElems)
def GroceryOrderMessageAddBread(builder, bread): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(bread), 0)
def AddBread(builder, bread):
    return GroceryOrderMessageAddBread(builder, bread)
def GroceryOrderMessageStartBreadVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartBreadVector(builder, numElems):
    return GroceryOrderMessageStartBreadVector(builder, numElems)
def GroceryOrderMessageAddMeat(builder, meat): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(meat), 0)
def AddMeat(builder, meat):
    return GroceryOrderMessageAddMeat(builder, meat)
def GroceryOrderMessageStartMeatVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartMeatVector(builder, numElems):
    return GroceryOrderMessageStartMeatVector(builder, numElems)
def GroceryOrderMessageEnd(builder): return builder.EndObject()
def End(builder):
    return GroceryOrderMessageEnd(builder)